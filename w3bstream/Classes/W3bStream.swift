
import Foundation
import UIKit

public class W3bStream: NSObject {
    
    let eventType: String
    let token: String
    let url: URL
    public init(url: URL, eventType: String, token: String) {
        self.eventType = eventType
        self.token = token
        self.url = url
    }
    
    public func upload(payload: [String: Any], completionHandler: ((Data?, Error?) -> Void)?) {
        
        func dictValueToString(_ dic: [String: Any]) -> String? {
            let data = try? JSONSerialization.data(withJSONObject: dic, options: [])
            let str = String(data: data!, encoding: String.Encoding.utf8)
            return str
        }
        
        let timestamp = Int(Date().timeIntervalSince1970 * 1000)

        let queryItems = [URLQueryItem(name: "eventType", value: self.eventType), URLQueryItem(name: "timestamp", value: "\(timestamp)")]
        var urlComps = URLComponents(url: url, resolvingAgainstBaseURL: false)
        urlComps?.queryItems = queryItems
            
        self.uploadViaHttps(url: url, payload: payload, headers: ["Authorization": self.token, "Content-Type":"application/octet-stream"]) { data, resp, err in
            completionHandler?(data, err)
        }
    }
    
    /// upload the data using https. the independent method
    /// - Parameters:
    ///   - url: url
    ///   - payload: generated by makePayload
    ///   - completionHandler:
    internal func uploadViaHttps(url: URL, payload: [String: Any],
                                 headers: [String: String] = [:],
                                 completionHandler: @escaping (Data?, URLResponse?, Error?) -> Void) {
        let jsonData = try? JSONSerialization.data(withJSONObject: payload)
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        
        headers.forEach { (key, value) in
            request.addValue(value, forHTTPHeaderField: key)
        }
        request.httpBody = jsonData
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            completionHandler(data, response, error)
        }
        task.resume()
        
    }
   
}
